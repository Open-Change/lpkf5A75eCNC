//--------------------------------------------------------------------------------
// Auto-generated by LiteX (--------) on 2025-07-25 13:29:27
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// CSR Includes.
//--------------------------------------------------------------------------------

#include <generated/soc.h>
#ifndef __GENERATED_CSR_H
#define __GENERATED_CSR_H
#include <stdint.h>
#include <system.h>
#ifndef CSR_ACCESSORS_DEFINED
#include <hw/common.h>
#endif /* ! CSR_ACCESSORS_DEFINED */

#ifndef CSR_BASE
#define CSR_BASE 0x0L
#endif /* ! CSR_BASE */

//--------------------------------------------------------------------------------
// CSR Registers/Fields Definition.
//--------------------------------------------------------------------------------

/* MMIO_INST Registers */
#define CSR_MMIO_INST_BASE (CSR_BASE + 0x0L)
#define CSR_MMIO_INST_MAGIC_ADDR (CSR_BASE + 0x0L)
#define CSR_MMIO_INST_MAGIC_SIZE 1
#define CSR_MMIO_INST_VERSION_ADDR (CSR_BASE + 0x4L)
#define CSR_MMIO_INST_VERSION_SIZE 1
#define CSR_MMIO_INST_CLOCK_FREQUENCY_ADDR (CSR_BASE + 0x8L)
#define CSR_MMIO_INST_CLOCK_FREQUENCY_SIZE 1
#define CSR_MMIO_INST_MODULE_CONFIG_ADDR (CSR_BASE + 0xcL)
#define CSR_MMIO_INST_MODULE_CONFIG_SIZE 1
#define CSR_MMIO_INST_NAME1_ADDR (CSR_BASE + 0x10L)
#define CSR_MMIO_INST_NAME1_SIZE 1
#define CSR_MMIO_INST_NAME2_ADDR (CSR_BASE + 0x14L)
#define CSR_MMIO_INST_NAME2_SIZE 1
#define CSR_MMIO_INST_NAME3_ADDR (CSR_BASE + 0x18L)
#define CSR_MMIO_INST_NAME3_SIZE 1
#define CSR_MMIO_INST_NAME4_ADDR (CSR_BASE + 0x1cL)
#define CSR_MMIO_INST_NAME4_SIZE 1
#define CSR_MMIO_INST_WATCHDOG_CONFIG_DATA_ADDR (CSR_BASE + 0x20L)
#define CSR_MMIO_INST_WATCHDOG_CONFIG_DATA_SIZE 1
#define CSR_MMIO_INST_MODULE_0_ADDR (CSR_BASE + 0x24L)
#define CSR_MMIO_INST_MODULE_0_SIZE 1
#define CSR_MMIO_INST_GPIO_CONFIG_DATA_ADDR (CSR_BASE + 0x28L)
#define CSR_MMIO_INST_GPIO_CONFIG_DATA_SIZE 3
#define CSR_MMIO_INST_MODULE_1_ADDR (CSR_BASE + 0x34L)
#define CSR_MMIO_INST_MODULE_1_SIZE 1
#define CSR_MMIO_INST_STEPGEN_CONFIG_DATA_ADDR (CSR_BASE + 0x38L)
#define CSR_MMIO_INST_STEPGEN_CONFIG_DATA_SIZE 2
#define CSR_MMIO_INST_MODULE_2_ADDR (CSR_BASE + 0x40L)
#define CSR_MMIO_INST_MODULE_2_SIZE 1
#define CSR_MMIO_INST_ENCODER_CONFIG_DATA_ADDR (CSR_BASE + 0x44L)
#define CSR_MMIO_INST_ENCODER_CONFIG_DATA_SIZE 1
#define CSR_MMIO_INST_RESET_ADDR (CSR_BASE + 0x48L)
#define CSR_MMIO_INST_RESET_SIZE 1
#define CSR_MMIO_INST_STEPGEN_0_STEPDATA_ADDR (CSR_BASE + 0x4cL)
#define CSR_MMIO_INST_STEPGEN_0_STEPDATA_SIZE 1
#define CSR_MMIO_INST_STEPGEN_1_STEPDATA_ADDR (CSR_BASE + 0x50L)
#define CSR_MMIO_INST_STEPGEN_1_STEPDATA_SIZE 1
#define CSR_MMIO_INST_STEPGEN_2_STEPDATA_ADDR (CSR_BASE + 0x54L)
#define CSR_MMIO_INST_STEPGEN_2_STEPDATA_SIZE 1
#define CSR_MMIO_INST_STEPGEN_3_STEPDATA_ADDR (CSR_BASE + 0x58L)
#define CSR_MMIO_INST_STEPGEN_3_STEPDATA_SIZE 1
#define CSR_MMIO_INST_STEPGEN_4_STEPDATA_ADDR (CSR_BASE + 0x5cL)
#define CSR_MMIO_INST_STEPGEN_4_STEPDATA_SIZE 1
#define CSR_MMIO_INST_WATCHDOG_DATA_ADDR (CSR_BASE + 0x60L)
#define CSR_MMIO_INST_WATCHDOG_DATA_SIZE 1
#define CSR_MMIO_INST_GPIO_OUT_ADDR (CSR_BASE + 0x64L)
#define CSR_MMIO_INST_GPIO_OUT_SIZE 2
#define CSR_MMIO_INST_STEPGEN_APPLY_TIME_ADDR (CSR_BASE + 0x6cL)
#define CSR_MMIO_INST_STEPGEN_APPLY_TIME_SIZE 2
#define CSR_MMIO_INST_STEPGEN_0_SPEED_TARGET_INDEX_ENABLE_ADDR (CSR_BASE + 0x74L)
#define CSR_MMIO_INST_STEPGEN_0_SPEED_TARGET_INDEX_ENABLE_SIZE 1
#define CSR_MMIO_INST_STEPGEN_0_MAX_ACCELERATION_ADDR (CSR_BASE + 0x78L)
#define CSR_MMIO_INST_STEPGEN_0_MAX_ACCELERATION_SIZE 1
#define CSR_MMIO_INST_STEPGEN_1_SPEED_TARGET_INDEX_ENABLE_ADDR (CSR_BASE + 0x7cL)
#define CSR_MMIO_INST_STEPGEN_1_SPEED_TARGET_INDEX_ENABLE_SIZE 1
#define CSR_MMIO_INST_STEPGEN_1_MAX_ACCELERATION_ADDR (CSR_BASE + 0x80L)
#define CSR_MMIO_INST_STEPGEN_1_MAX_ACCELERATION_SIZE 1
#define CSR_MMIO_INST_STEPGEN_2_SPEED_TARGET_INDEX_ENABLE_ADDR (CSR_BASE + 0x84L)
#define CSR_MMIO_INST_STEPGEN_2_SPEED_TARGET_INDEX_ENABLE_SIZE 1
#define CSR_MMIO_INST_STEPGEN_2_MAX_ACCELERATION_ADDR (CSR_BASE + 0x88L)
#define CSR_MMIO_INST_STEPGEN_2_MAX_ACCELERATION_SIZE 1
#define CSR_MMIO_INST_STEPGEN_3_SPEED_TARGET_INDEX_ENABLE_ADDR (CSR_BASE + 0x8cL)
#define CSR_MMIO_INST_STEPGEN_3_SPEED_TARGET_INDEX_ENABLE_SIZE 1
#define CSR_MMIO_INST_STEPGEN_3_MAX_ACCELERATION_ADDR (CSR_BASE + 0x90L)
#define CSR_MMIO_INST_STEPGEN_3_MAX_ACCELERATION_SIZE 1
#define CSR_MMIO_INST_STEPGEN_4_SPEED_TARGET_INDEX_ENABLE_ADDR (CSR_BASE + 0x94L)
#define CSR_MMIO_INST_STEPGEN_4_SPEED_TARGET_INDEX_ENABLE_SIZE 1
#define CSR_MMIO_INST_STEPGEN_4_MAX_ACCELERATION_ADDR (CSR_BASE + 0x98L)
#define CSR_MMIO_INST_STEPGEN_4_MAX_ACCELERATION_SIZE 1
#define CSR_MMIO_INST_ENCODER_INDEX_ENABLE_ADDR (CSR_BASE + 0x9cL)
#define CSR_MMIO_INST_ENCODER_INDEX_ENABLE_SIZE 1
#define CSR_MMIO_INST_ENCODER_RESET_INDEX_PULSE_ADDR (CSR_BASE + 0xa0L)
#define CSR_MMIO_INST_ENCODER_RESET_INDEX_PULSE_SIZE 1
#define CSR_MMIO_INST_WATCHDOG_STATUS_ADDR (CSR_BASE + 0xa4L)
#define CSR_MMIO_INST_WATCHDOG_STATUS_SIZE 1
#define CSR_MMIO_INST_WALL_CLOCK_ADDR (CSR_BASE + 0xa8L)
#define CSR_MMIO_INST_WALL_CLOCK_SIZE 2
#define CSR_MMIO_INST_GPIO_IN_ADDR (CSR_BASE + 0xb0L)
#define CSR_MMIO_INST_GPIO_IN_SIZE 1
#define CSR_MMIO_INST_STEPGEN_0_POSITION_ADDR (CSR_BASE + 0xb4L)
#define CSR_MMIO_INST_STEPGEN_0_POSITION_SIZE 2
#define CSR_MMIO_INST_STEPGEN_0_SPEED_ADDR (CSR_BASE + 0xbcL)
#define CSR_MMIO_INST_STEPGEN_0_SPEED_SIZE 1
#define CSR_MMIO_INST_STEPGEN_1_POSITION_ADDR (CSR_BASE + 0xc0L)
#define CSR_MMIO_INST_STEPGEN_1_POSITION_SIZE 2
#define CSR_MMIO_INST_STEPGEN_1_SPEED_ADDR (CSR_BASE + 0xc8L)
#define CSR_MMIO_INST_STEPGEN_1_SPEED_SIZE 1
#define CSR_MMIO_INST_STEPGEN_2_POSITION_ADDR (CSR_BASE + 0xccL)
#define CSR_MMIO_INST_STEPGEN_2_POSITION_SIZE 2
#define CSR_MMIO_INST_STEPGEN_2_SPEED_ADDR (CSR_BASE + 0xd4L)
#define CSR_MMIO_INST_STEPGEN_2_SPEED_SIZE 1
#define CSR_MMIO_INST_STEPGEN_3_POSITION_ADDR (CSR_BASE + 0xd8L)
#define CSR_MMIO_INST_STEPGEN_3_POSITION_SIZE 2
#define CSR_MMIO_INST_STEPGEN_3_SPEED_ADDR (CSR_BASE + 0xe0L)
#define CSR_MMIO_INST_STEPGEN_3_SPEED_SIZE 1
#define CSR_MMIO_INST_STEPGEN_4_POSITION_ADDR (CSR_BASE + 0xe4L)
#define CSR_MMIO_INST_STEPGEN_4_POSITION_SIZE 2
#define CSR_MMIO_INST_STEPGEN_4_SPEED_ADDR (CSR_BASE + 0xecL)
#define CSR_MMIO_INST_STEPGEN_4_SPEED_SIZE 1
#define CSR_MMIO_INST_ENCODER_INDEX_PULSE_ADDR (CSR_BASE + 0xf0L)
#define CSR_MMIO_INST_ENCODER_INDEX_PULSE_SIZE 1
#define CSR_MMIO_INST_ENCODER_0_COUNTER_ADDR (CSR_BASE + 0xf4L)
#define CSR_MMIO_INST_ENCODER_0_COUNTER_SIZE 1
#define CSR_MMIO_INST_ENCODER_1_COUNTER_ADDR (CSR_BASE + 0xf8L)
#define CSR_MMIO_INST_ENCODER_1_COUNTER_SIZE 1
#define CSR_MMIO_INST_ENCODER_2_COUNTER_ADDR (CSR_BASE + 0xfcL)
#define CSR_MMIO_INST_ENCODER_2_COUNTER_SIZE 1
#define CSR_MMIO_INST_ENCODER_3_COUNTER_ADDR (CSR_BASE + 0x100L)
#define CSR_MMIO_INST_ENCODER_3_COUNTER_SIZE 1
#define CSR_MMIO_INST_ENCODER_4_COUNTER_ADDR (CSR_BASE + 0x104L)
#define CSR_MMIO_INST_ENCODER_4_COUNTER_SIZE 1

/* MMIO_INST Fields */
#define CSR_MMIO_INST_VERSION_PATCH_OFFSET 0
#define CSR_MMIO_INST_VERSION_PATCH_SIZE 8
#define CSR_MMIO_INST_VERSION_MINOR_OFFSET 8
#define CSR_MMIO_INST_VERSION_MINOR_SIZE 8
#define CSR_MMIO_INST_VERSION_MAJOR_OFFSET 16
#define CSR_MMIO_INST_VERSION_MAJOR_SIZE 8
#define CSR_MMIO_INST_MODULE_CONFIG_MODULE_DATA_SIZE_OFFSET 0
#define CSR_MMIO_INST_MODULE_CONFIG_MODULE_DATA_SIZE_SIZE 16
#define CSR_MMIO_INST_MODULE_CONFIG_NUM_MODULES_OFFSET 16
#define CSR_MMIO_INST_MODULE_CONFIG_NUM_MODULES_SIZE 8
#define CSR_MMIO_INST_STEPGEN_0_STEPDATA_STEPLEN_OFFSET 0
#define CSR_MMIO_INST_STEPGEN_0_STEPDATA_STEPLEN_SIZE 10
#define CSR_MMIO_INST_STEPGEN_0_STEPDATA_DIR_HOLD_TIME_OFFSET 10
#define CSR_MMIO_INST_STEPGEN_0_STEPDATA_DIR_HOLD_TIME_SIZE 10
#define CSR_MMIO_INST_STEPGEN_0_STEPDATA_DIR_SETUP_TIME_OFFSET 20
#define CSR_MMIO_INST_STEPGEN_0_STEPDATA_DIR_SETUP_TIME_SIZE 12
#define CSR_MMIO_INST_STEPGEN_1_STEPDATA_STEPLEN_OFFSET 0
#define CSR_MMIO_INST_STEPGEN_1_STEPDATA_STEPLEN_SIZE 10
#define CSR_MMIO_INST_STEPGEN_1_STEPDATA_DIR_HOLD_TIME_OFFSET 10
#define CSR_MMIO_INST_STEPGEN_1_STEPDATA_DIR_HOLD_TIME_SIZE 10
#define CSR_MMIO_INST_STEPGEN_1_STEPDATA_DIR_SETUP_TIME_OFFSET 20
#define CSR_MMIO_INST_STEPGEN_1_STEPDATA_DIR_SETUP_TIME_SIZE 12
#define CSR_MMIO_INST_STEPGEN_2_STEPDATA_STEPLEN_OFFSET 0
#define CSR_MMIO_INST_STEPGEN_2_STEPDATA_STEPLEN_SIZE 10
#define CSR_MMIO_INST_STEPGEN_2_STEPDATA_DIR_HOLD_TIME_OFFSET 10
#define CSR_MMIO_INST_STEPGEN_2_STEPDATA_DIR_HOLD_TIME_SIZE 10
#define CSR_MMIO_INST_STEPGEN_2_STEPDATA_DIR_SETUP_TIME_OFFSET 20
#define CSR_MMIO_INST_STEPGEN_2_STEPDATA_DIR_SETUP_TIME_SIZE 12
#define CSR_MMIO_INST_STEPGEN_3_STEPDATA_STEPLEN_OFFSET 0
#define CSR_MMIO_INST_STEPGEN_3_STEPDATA_STEPLEN_SIZE 10
#define CSR_MMIO_INST_STEPGEN_3_STEPDATA_DIR_HOLD_TIME_OFFSET 10
#define CSR_MMIO_INST_STEPGEN_3_STEPDATA_DIR_HOLD_TIME_SIZE 10
#define CSR_MMIO_INST_STEPGEN_3_STEPDATA_DIR_SETUP_TIME_OFFSET 20
#define CSR_MMIO_INST_STEPGEN_3_STEPDATA_DIR_SETUP_TIME_SIZE 12
#define CSR_MMIO_INST_STEPGEN_4_STEPDATA_STEPLEN_OFFSET 0
#define CSR_MMIO_INST_STEPGEN_4_STEPDATA_STEPLEN_SIZE 10
#define CSR_MMIO_INST_STEPGEN_4_STEPDATA_DIR_HOLD_TIME_OFFSET 10
#define CSR_MMIO_INST_STEPGEN_4_STEPDATA_DIR_HOLD_TIME_SIZE 10
#define CSR_MMIO_INST_STEPGEN_4_STEPDATA_DIR_SETUP_TIME_OFFSET 20
#define CSR_MMIO_INST_STEPGEN_4_STEPDATA_DIR_SETUP_TIME_SIZE 12
#define CSR_MMIO_INST_STEPGEN_0_SPEED_TARGET_INDEX_ENABLE_SPEED_TARGET_OFFSET 0
#define CSR_MMIO_INST_STEPGEN_0_SPEED_TARGET_INDEX_ENABLE_SPEED_TARGET_SIZE 31
#define CSR_MMIO_INST_STEPGEN_0_SPEED_TARGET_INDEX_ENABLE_INDEX_ENABLE_OFFSET 31
#define CSR_MMIO_INST_STEPGEN_0_SPEED_TARGET_INDEX_ENABLE_INDEX_ENABLE_SIZE 1
#define CSR_MMIO_INST_STEPGEN_1_SPEED_TARGET_INDEX_ENABLE_SPEED_TARGET_OFFSET 0
#define CSR_MMIO_INST_STEPGEN_1_SPEED_TARGET_INDEX_ENABLE_SPEED_TARGET_SIZE 31
#define CSR_MMIO_INST_STEPGEN_1_SPEED_TARGET_INDEX_ENABLE_INDEX_ENABLE_OFFSET 31
#define CSR_MMIO_INST_STEPGEN_1_SPEED_TARGET_INDEX_ENABLE_INDEX_ENABLE_SIZE 1
#define CSR_MMIO_INST_STEPGEN_2_SPEED_TARGET_INDEX_ENABLE_SPEED_TARGET_OFFSET 0
#define CSR_MMIO_INST_STEPGEN_2_SPEED_TARGET_INDEX_ENABLE_SPEED_TARGET_SIZE 31
#define CSR_MMIO_INST_STEPGEN_2_SPEED_TARGET_INDEX_ENABLE_INDEX_ENABLE_OFFSET 31
#define CSR_MMIO_INST_STEPGEN_2_SPEED_TARGET_INDEX_ENABLE_INDEX_ENABLE_SIZE 1
#define CSR_MMIO_INST_STEPGEN_3_SPEED_TARGET_INDEX_ENABLE_SPEED_TARGET_OFFSET 0
#define CSR_MMIO_INST_STEPGEN_3_SPEED_TARGET_INDEX_ENABLE_SPEED_TARGET_SIZE 31
#define CSR_MMIO_INST_STEPGEN_3_SPEED_TARGET_INDEX_ENABLE_INDEX_ENABLE_OFFSET 31
#define CSR_MMIO_INST_STEPGEN_3_SPEED_TARGET_INDEX_ENABLE_INDEX_ENABLE_SIZE 1
#define CSR_MMIO_INST_STEPGEN_4_SPEED_TARGET_INDEX_ENABLE_SPEED_TARGET_OFFSET 0
#define CSR_MMIO_INST_STEPGEN_4_SPEED_TARGET_INDEX_ENABLE_SPEED_TARGET_SIZE 31
#define CSR_MMIO_INST_STEPGEN_4_SPEED_TARGET_INDEX_ENABLE_INDEX_ENABLE_OFFSET 31
#define CSR_MMIO_INST_STEPGEN_4_SPEED_TARGET_INDEX_ENABLE_INDEX_ENABLE_SIZE 1
#define CSR_MMIO_INST_STEPGEN_0_SPEED_SPEED_OFFSET 0
#define CSR_MMIO_INST_STEPGEN_0_SPEED_SPEED_SIZE 31
#define CSR_MMIO_INST_STEPGEN_0_SPEED_INDEX_FLAG_OFFSET 31
#define CSR_MMIO_INST_STEPGEN_0_SPEED_INDEX_FLAG_SIZE 1
#define CSR_MMIO_INST_STEPGEN_1_SPEED_SPEED_OFFSET 0
#define CSR_MMIO_INST_STEPGEN_1_SPEED_SPEED_SIZE 31
#define CSR_MMIO_INST_STEPGEN_1_SPEED_INDEX_FLAG_OFFSET 31
#define CSR_MMIO_INST_STEPGEN_1_SPEED_INDEX_FLAG_SIZE 1
#define CSR_MMIO_INST_STEPGEN_2_SPEED_SPEED_OFFSET 0
#define CSR_MMIO_INST_STEPGEN_2_SPEED_SPEED_SIZE 31
#define CSR_MMIO_INST_STEPGEN_2_SPEED_INDEX_FLAG_OFFSET 31
#define CSR_MMIO_INST_STEPGEN_2_SPEED_INDEX_FLAG_SIZE 1
#define CSR_MMIO_INST_STEPGEN_3_SPEED_SPEED_OFFSET 0
#define CSR_MMIO_INST_STEPGEN_3_SPEED_SPEED_SIZE 31
#define CSR_MMIO_INST_STEPGEN_3_SPEED_INDEX_FLAG_OFFSET 31
#define CSR_MMIO_INST_STEPGEN_3_SPEED_INDEX_FLAG_SIZE 1
#define CSR_MMIO_INST_STEPGEN_4_SPEED_SPEED_OFFSET 0
#define CSR_MMIO_INST_STEPGEN_4_SPEED_SPEED_SIZE 31
#define CSR_MMIO_INST_STEPGEN_4_SPEED_INDEX_FLAG_OFFSET 31
#define CSR_MMIO_INST_STEPGEN_4_SPEED_INDEX_FLAG_SIZE 1

/* CTRL Registers */
#define CSR_CTRL_BASE (CSR_BASE + 0x800L)
#define CSR_CTRL_RESET_ADDR (CSR_BASE + 0x800L)
#define CSR_CTRL_RESET_SIZE 1
#define CSR_CTRL_SCRATCH_ADDR (CSR_BASE + 0x804L)
#define CSR_CTRL_SCRATCH_SIZE 1
#define CSR_CTRL_BUS_ERRORS_ADDR (CSR_BASE + 0x808L)
#define CSR_CTRL_BUS_ERRORS_SIZE 1

/* CTRL Fields */
#define CSR_CTRL_RESET_SOC_RST_OFFSET 0
#define CSR_CTRL_RESET_SOC_RST_SIZE 1
#define CSR_CTRL_RESET_CPU_RST_OFFSET 1
#define CSR_CTRL_RESET_CPU_RST_SIZE 1

/* ETHPHY Registers */
#define CSR_ETHPHY_BASE (CSR_BASE + 0x1000L)
#define CSR_ETHPHY_CRG_RESET_ADDR (CSR_BASE + 0x1000L)
#define CSR_ETHPHY_CRG_RESET_SIZE 1
#define CSR_ETHPHY_RX_INBAND_STATUS_ADDR (CSR_BASE + 0x1004L)
#define CSR_ETHPHY_RX_INBAND_STATUS_SIZE 1
#define CSR_ETHPHY_MDIO_W_ADDR (CSR_BASE + 0x1008L)
#define CSR_ETHPHY_MDIO_W_SIZE 1
#define CSR_ETHPHY_MDIO_R_ADDR (CSR_BASE + 0x100cL)
#define CSR_ETHPHY_MDIO_R_SIZE 1

/* ETHPHY Fields */
#define CSR_ETHPHY_RX_INBAND_STATUS_LINK_STATUS_OFFSET 0
#define CSR_ETHPHY_RX_INBAND_STATUS_LINK_STATUS_SIZE 1
#define CSR_ETHPHY_RX_INBAND_STATUS_CLOCK_SPEED_OFFSET 1
#define CSR_ETHPHY_RX_INBAND_STATUS_CLOCK_SPEED_SIZE 2
#define CSR_ETHPHY_RX_INBAND_STATUS_DUPLEX_STATUS_OFFSET 3
#define CSR_ETHPHY_RX_INBAND_STATUS_DUPLEX_STATUS_SIZE 1
#define CSR_ETHPHY_MDIO_W_MDC_OFFSET 0
#define CSR_ETHPHY_MDIO_W_MDC_SIZE 1
#define CSR_ETHPHY_MDIO_W_OE_OFFSET 1
#define CSR_ETHPHY_MDIO_W_OE_SIZE 1
#define CSR_ETHPHY_MDIO_W_W_OFFSET 2
#define CSR_ETHPHY_MDIO_W_W_SIZE 1
#define CSR_ETHPHY_MDIO_R_R_OFFSET 0
#define CSR_ETHPHY_MDIO_R_R_SIZE 1

/* IDENTIFIER_MEM Registers */
#define CSR_IDENTIFIER_MEM_BASE (CSR_BASE + 0x1800L)

/* IDENTIFIER_MEM Fields */

//--------------------------------------------------------------------------------
// CSR Registers Access Functions.
//--------------------------------------------------------------------------------

#ifndef LITEX_CSR_ACCESS_FUNCTIONS
#define LITEX_CSR_ACCESS_FUNCTIONS 1
#endif

#if LITEX_CSR_ACCESS_FUNCTIONS

/* MMIO_INST Access Functions */
static inline uint32_t MMIO_inst_magic_read(void) {
	return csr_read_simple((CSR_BASE + 0x0L));
}
static inline uint32_t MMIO_inst_version_read(void) {
	return csr_read_simple((CSR_BASE + 0x4L));
}
static inline uint32_t MMIO_inst_clock_frequency_read(void) {
	return csr_read_simple((CSR_BASE + 0x8L));
}
static inline uint32_t MMIO_inst_module_config_read(void) {
	return csr_read_simple((CSR_BASE + 0xcL));
}
static inline uint32_t MMIO_inst_name1_read(void) {
	return csr_read_simple((CSR_BASE + 0x10L));
}
static inline uint32_t MMIO_inst_name2_read(void) {
	return csr_read_simple((CSR_BASE + 0x14L));
}
static inline uint32_t MMIO_inst_name3_read(void) {
	return csr_read_simple((CSR_BASE + 0x18L));
}
static inline uint32_t MMIO_inst_name4_read(void) {
	return csr_read_simple((CSR_BASE + 0x1cL));
}
static inline uint32_t MMIO_inst_watchdog_config_data_read(void) {
	return csr_read_simple((CSR_BASE + 0x20L));
}
static inline uint32_t MMIO_inst_module_0_read(void) {
	return csr_read_simple((CSR_BASE + 0x24L));
}
static inline uint32_t MMIO_inst_module_1_read(void) {
	return csr_read_simple((CSR_BASE + 0x34L));
}
static inline uint64_t MMIO_inst_stepgen_config_data_read(void) {
	uint64_t r = csr_read_simple((CSR_BASE + 0x38L));
	r <<= 32;
	r |= csr_read_simple((CSR_BASE + 0x3cL));
	return r;
}
static inline uint32_t MMIO_inst_module_2_read(void) {
	return csr_read_simple((CSR_BASE + 0x40L));
}
static inline uint32_t MMIO_inst_encoder_config_data_read(void) {
	return csr_read_simple((CSR_BASE + 0x44L));
}
static inline uint32_t MMIO_inst_reset_read(void) {
	return csr_read_simple((CSR_BASE + 0x48L));
}
static inline void MMIO_inst_reset_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x48L));
}
static inline uint32_t MMIO_inst_stepgen_0_stepdata_read(void) {
	return csr_read_simple((CSR_BASE + 0x4cL));
}
static inline void MMIO_inst_stepgen_0_stepdata_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4cL));
}
static inline uint32_t MMIO_inst_stepgen_1_stepdata_read(void) {
	return csr_read_simple((CSR_BASE + 0x50L));
}
static inline void MMIO_inst_stepgen_1_stepdata_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x50L));
}
static inline uint32_t MMIO_inst_stepgen_2_stepdata_read(void) {
	return csr_read_simple((CSR_BASE + 0x54L));
}
static inline void MMIO_inst_stepgen_2_stepdata_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x54L));
}
static inline uint32_t MMIO_inst_stepgen_3_stepdata_read(void) {
	return csr_read_simple((CSR_BASE + 0x58L));
}
static inline void MMIO_inst_stepgen_3_stepdata_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x58L));
}
static inline uint32_t MMIO_inst_stepgen_4_stepdata_read(void) {
	return csr_read_simple((CSR_BASE + 0x5cL));
}
static inline void MMIO_inst_stepgen_4_stepdata_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x5cL));
}
static inline uint32_t MMIO_inst_watchdog_data_read(void) {
	return csr_read_simple((CSR_BASE + 0x60L));
}
static inline void MMIO_inst_watchdog_data_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x60L));
}
static inline uint64_t MMIO_inst_gpio_out_read(void) {
	uint64_t r = csr_read_simple((CSR_BASE + 0x64L));
	r <<= 32;
	r |= csr_read_simple((CSR_BASE + 0x68L));
	return r;
}
static inline void MMIO_inst_gpio_out_write(uint64_t v) {
	csr_write_simple(v >> 32, (CSR_BASE + 0x64L));
	csr_write_simple(v, (CSR_BASE + 0x68L));
}
static inline uint64_t MMIO_inst_stepgen_apply_time_read(void) {
	uint64_t r = csr_read_simple((CSR_BASE + 0x6cL));
	r <<= 32;
	r |= csr_read_simple((CSR_BASE + 0x70L));
	return r;
}
static inline void MMIO_inst_stepgen_apply_time_write(uint64_t v) {
	csr_write_simple(v >> 32, (CSR_BASE + 0x6cL));
	csr_write_simple(v, (CSR_BASE + 0x70L));
}
static inline uint32_t MMIO_inst_stepgen_0_speed_target_index_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x74L));
}
static inline void MMIO_inst_stepgen_0_speed_target_index_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x74L));
}
static inline uint32_t MMIO_inst_stepgen_0_max_acceleration_read(void) {
	return csr_read_simple((CSR_BASE + 0x78L));
}
static inline void MMIO_inst_stepgen_0_max_acceleration_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x78L));
}
static inline uint32_t MMIO_inst_stepgen_1_speed_target_index_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x7cL));
}
static inline void MMIO_inst_stepgen_1_speed_target_index_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x7cL));
}
static inline uint32_t MMIO_inst_stepgen_1_max_acceleration_read(void) {
	return csr_read_simple((CSR_BASE + 0x80L));
}
static inline void MMIO_inst_stepgen_1_max_acceleration_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x80L));
}
static inline uint32_t MMIO_inst_stepgen_2_speed_target_index_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x84L));
}
static inline void MMIO_inst_stepgen_2_speed_target_index_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x84L));
}
static inline uint32_t MMIO_inst_stepgen_2_max_acceleration_read(void) {
	return csr_read_simple((CSR_BASE + 0x88L));
}
static inline void MMIO_inst_stepgen_2_max_acceleration_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x88L));
}
static inline uint32_t MMIO_inst_stepgen_3_speed_target_index_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x8cL));
}
static inline void MMIO_inst_stepgen_3_speed_target_index_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x8cL));
}
static inline uint32_t MMIO_inst_stepgen_3_max_acceleration_read(void) {
	return csr_read_simple((CSR_BASE + 0x90L));
}
static inline void MMIO_inst_stepgen_3_max_acceleration_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x90L));
}
static inline uint32_t MMIO_inst_stepgen_4_speed_target_index_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x94L));
}
static inline void MMIO_inst_stepgen_4_speed_target_index_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x94L));
}
static inline uint32_t MMIO_inst_stepgen_4_max_acceleration_read(void) {
	return csr_read_simple((CSR_BASE + 0x98L));
}
static inline void MMIO_inst_stepgen_4_max_acceleration_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x98L));
}
static inline uint32_t MMIO_inst_encoder_index_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x9cL));
}
static inline void MMIO_inst_encoder_index_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x9cL));
}
static inline uint32_t MMIO_inst_encoder_reset_index_pulse_read(void) {
	return csr_read_simple((CSR_BASE + 0xa0L));
}
static inline void MMIO_inst_encoder_reset_index_pulse_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xa0L));
}
static inline uint32_t MMIO_inst_watchdog_status_read(void) {
	return csr_read_simple((CSR_BASE + 0xa4L));
}
static inline uint64_t MMIO_inst_wall_clock_read(void) {
	uint64_t r = csr_read_simple((CSR_BASE + 0xa8L));
	r <<= 32;
	r |= csr_read_simple((CSR_BASE + 0xacL));
	return r;
}
static inline uint32_t MMIO_inst_gpio_in_read(void) {
	return csr_read_simple((CSR_BASE + 0xb0L));
}
static inline uint64_t MMIO_inst_stepgen_0_position_read(void) {
	uint64_t r = csr_read_simple((CSR_BASE + 0xb4L));
	r <<= 32;
	r |= csr_read_simple((CSR_BASE + 0xb8L));
	return r;
}
static inline uint32_t MMIO_inst_stepgen_0_speed_read(void) {
	return csr_read_simple((CSR_BASE + 0xbcL));
}
static inline uint64_t MMIO_inst_stepgen_1_position_read(void) {
	uint64_t r = csr_read_simple((CSR_BASE + 0xc0L));
	r <<= 32;
	r |= csr_read_simple((CSR_BASE + 0xc4L));
	return r;
}
static inline uint32_t MMIO_inst_stepgen_1_speed_read(void) {
	return csr_read_simple((CSR_BASE + 0xc8L));
}
static inline uint64_t MMIO_inst_stepgen_2_position_read(void) {
	uint64_t r = csr_read_simple((CSR_BASE + 0xccL));
	r <<= 32;
	r |= csr_read_simple((CSR_BASE + 0xd0L));
	return r;
}
static inline uint32_t MMIO_inst_stepgen_2_speed_read(void) {
	return csr_read_simple((CSR_BASE + 0xd4L));
}
static inline uint64_t MMIO_inst_stepgen_3_position_read(void) {
	uint64_t r = csr_read_simple((CSR_BASE + 0xd8L));
	r <<= 32;
	r |= csr_read_simple((CSR_BASE + 0xdcL));
	return r;
}
static inline uint32_t MMIO_inst_stepgen_3_speed_read(void) {
	return csr_read_simple((CSR_BASE + 0xe0L));
}
static inline uint64_t MMIO_inst_stepgen_4_position_read(void) {
	uint64_t r = csr_read_simple((CSR_BASE + 0xe4L));
	r <<= 32;
	r |= csr_read_simple((CSR_BASE + 0xe8L));
	return r;
}
static inline uint32_t MMIO_inst_stepgen_4_speed_read(void) {
	return csr_read_simple((CSR_BASE + 0xecL));
}
static inline uint32_t MMIO_inst_encoder_index_pulse_read(void) {
	return csr_read_simple((CSR_BASE + 0xf0L));
}
static inline uint32_t MMIO_inst_encoder_0_counter_read(void) {
	return csr_read_simple((CSR_BASE + 0xf4L));
}
static inline uint32_t MMIO_inst_encoder_1_counter_read(void) {
	return csr_read_simple((CSR_BASE + 0xf8L));
}
static inline uint32_t MMIO_inst_encoder_2_counter_read(void) {
	return csr_read_simple((CSR_BASE + 0xfcL));
}
static inline uint32_t MMIO_inst_encoder_3_counter_read(void) {
	return csr_read_simple((CSR_BASE + 0x100L));
}
static inline uint32_t MMIO_inst_encoder_4_counter_read(void) {
	return csr_read_simple((CSR_BASE + 0x104L));
}

/* CTRL Access Functions */
static inline uint32_t ctrl_reset_read(void) {
	return csr_read_simple((CSR_BASE + 0x800L));
}
static inline void ctrl_reset_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x800L));
}
static inline uint32_t ctrl_scratch_read(void) {
	return csr_read_simple((CSR_BASE + 0x804L));
}
static inline void ctrl_scratch_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x804L));
}
static inline uint32_t ctrl_bus_errors_read(void) {
	return csr_read_simple((CSR_BASE + 0x808L));
}

/* ETHPHY Access Functions */
static inline uint32_t ethphy_crg_reset_read(void) {
	return csr_read_simple((CSR_BASE + 0x1000L));
}
static inline void ethphy_crg_reset_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1000L));
}
static inline uint32_t ethphy_rx_inband_status_read(void) {
	return csr_read_simple((CSR_BASE + 0x1004L));
}
static inline uint32_t ethphy_mdio_w_read(void) {
	return csr_read_simple((CSR_BASE + 0x1008L));
}
static inline void ethphy_mdio_w_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1008L));
}
static inline uint32_t ethphy_mdio_r_read(void) {
	return csr_read_simple((CSR_BASE + 0x100cL));
}

/* IDENTIFIER_MEM Access Functions */
#endif /* LITEX_CSR_ACCESS_FUNCTIONS */

#endif /* ! __GENERATED_CSR_H */
